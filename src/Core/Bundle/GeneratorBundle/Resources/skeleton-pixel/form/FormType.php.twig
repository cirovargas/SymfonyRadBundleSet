<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
use {{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }};
{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {%- if fields|length > 0 %}
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder

        {%- for field in fields -%}
            {%- if fields_mapping[field] is defined and fields_mapping[field]['type'] in ['date', 'time', 'datetime'] %}
            {% if fields_mapping[field]['type'] == 'date' %}
                {% set fieldType = 'DateType' %}
                {% set picker = 'datepicker' %}
                {% set icon = 'calendar' %}
                {% set format = 'dd/MM/yyyy' %}
            {% elseif fields_mapping[field]['type'] == 'datetime' %}
                {% set fieldType = 'DateTimeType' %}
                {% set picker = 'datetimepicker' %}
                {% set icon = 'calendar' %}
                {% set format = 'dd/MM/yyyy HH:mm' %}
            {% elseif fields_mapping[field]['type'] == 'time' %}
                {% set fieldType = 'TimeType' %}
                {% set picker = 'timepicker' %}
                {% set icon = 'time' %}
                {% set format = 'HH:mm' %}
            {% endif %}
            
            ->add('{{ field }}', {{ fieldType }}::class,array(
                'label' => 'app.{{ entity_class|lower }}.{{ field|lower }}',
                'translation_domain' => 'EntityTranslations',
                'widget' => 'single_text',
                'format' => '{{ format }}',
                'widget_addon_prepend' => array(
                    'icon' => '{{ icon }}'
                ),
                'attr' => array(
                    'class' =>'{{ picker }}'
                )
            ))
            
            {%- else %}

            ->add('{{ field }}',null,array(
                'label' => 'app.{{ entity_class|lower }}.{{ field|lower }}',
                'translation_domain' => 'EntityTranslations'
            ))

            {%- endif -%}
        {%- endfor %}

        ;
    }
    {% endif %}


    /**
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => {{ entity_class }}::class
        ));
    }

    {%- if get_name_required %}

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }
    {% endif %}

{% endblock class_body %}
}
