<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormError;
use Lexik\Bundle\FormFilterBundle\Filter\FilterOperands;
use Lexik\Bundle\FormFilterBundle\Filter\Form\Type as FormFilterTypes;

class {{ form_class }} extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
        {%- for data in fields_data %}
        {% if data.filterWidget is not defined or data.filterWidget != 'not_defined' %}
            ->add('{{ data.fieldName }}', FormFilterTypes\{{ data.filterWidget }}::class,array(
                'label' => 'app.{{ entity_class|lower }}.{{ data.fieldName|lower }}',
                'translation_domain' => 'EntityTranslations',
                {% if data.filterWidget == 'TextFilterType' %}'condition_pattern' => FilterOperands::STRING_CONTAINS{%- endif %}

            ))
        {% endif %}
        {%- endfor %}

        ;

        $listener = function(FormEvent $event)
        {
            // Is data empty?
            foreach ($event->getData() as $data) {
                if(is_array($data)) {
                    foreach ($data as $subData) {
                        if(!empty($subData)) return;
                    }
                }
                else {
                    if(!empty($data)) return;
                }
            }

            $event->getForm()->addError(new FormError('Filter empty'));
        };
        $builder->addEventListener(FormEvents::POST_SUBMIT, $listener);
    }

    public function getName()
    {
        return '{{ form_filter_type_name }}';
    }
}
