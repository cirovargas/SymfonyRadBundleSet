<?php

namespace {{ namespace }}\EventListener{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

use Core\AdminBundle\Event\ConfigureMenuEvent;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class {{ form_class }} implements EventSubscriberInterface{

    public function __construct(TokenStorage $tokenStorage) {
        $this->tokenStorage = $tokenStorage;
    }
    
    /**
     * @param \AppBundle\Event\ConfigureMenuEvent $event
     */
    public function onMenuConfigure(ConfigureMenuEvent $event)
    {
        $user = $this->tokenStorage->getToken()->getUser();
        
        if($user->hasRole('ROLE_ADMIN_{{ entity_class|upper }}')){
            $menu = $event->getMenu();

            {% if needWriteActions == true %}
            $menu->addChild('{{ entity_class }}', array(
                'attributes'    => array(
                    'class'             => 'mm-dropdown mm-dropdown-root',
                    )
                )
            )->setAttribute('icon', 'menu-icon fa fa-th-list');

            $menu['{{ entity_class }}']->setUri('#');
            $menu['{{ entity_class }}']->addChild('List {{ entity_class}}', array('route' => '{{ route_prefix }}'));
            if($user->hasRole('ROLE_ADMIN_{{ entity_class|upper }}_NEW')){
                $menu['{{ entity_class }}']->addChild('New {{ entity_class }}', array('route' => '{{ route_prefix }}_new'));
            }
            {% else %}
            $menu->addChild('{{ entity_class }}', array(
                'route'    => '{{ route_prefix }}'
                )
            )->setAttribute('icon', 'menu-icon fa fa-th-list');
        {% endif %}
        }
    }
    
    public static function getSubscribedEvents() {
        return array(
            'app.menu_configure'     => array('onMenuConfigure', 0),
        );
    }
}